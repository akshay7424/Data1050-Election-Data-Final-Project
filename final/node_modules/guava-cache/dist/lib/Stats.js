var Stats,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  hasProp = {}.hasOwnProperty;

module.exports = Stats = (function() {
  function Stats() {
    this.toString = bind(this.toString, this);
    this.toObject = bind(this.toObject, this);
    this._computeRates = bind(this._computeRates, this);
    this.loadCount = bind(this.loadCount, this);
    this.requestCount = bind(this.requestCount, this);
    this.loadError = bind(this.loadError, this);
    this.loadOk = bind(this.loadOk, this);
    this.evict = bind(this.evict, this);
    this.miss = bind(this.miss, this);
    this.hit = bind(this.hit, this);
    this.hitCount = 0;
    this.missCount = 0;
    this.loadSuccessCount = 0;
    this.loadErrorCount = 0;
    this.evictionCount = 0;
  }

  Stats.prototype.hit = function() {
    return this.hitCount++;
  };

  Stats.prototype.miss = function() {
    return this.missCount++;
  };

  Stats.prototype.evict = function() {
    return this.evictionCount++;
  };

  Stats.prototype.loadOk = function() {
    return this.loadSuccessCount++;
  };

  Stats.prototype.loadError = function() {
    return this.loadErrorCount++;
  };

  Stats.prototype.requestCount = function() {
    return this.hitCount + this.missCount;
  };

  Stats.prototype.loadCount = function() {
    return this.loadSuccessCount + this.loadErrorCount;
  };

  Stats.prototype._computeRates = function() {
    var rates, ref, ref1;
    rates = {};
    ref = this._rates(this.hitCount, this.missCount, this.requestCount()), rates.hit = ref[0], rates.miss = ref[1];
    ref1 = this._rates(this.loadSuccessCount, this.loadErrorCount, this.loadCount()), rates.loadOk = ref1[0], rates.loadErr = ref1[1];
    return rates;
  };

  Stats.prototype._rates = function(ok, err, total) {
    if (total === 0) {
      return [1, 0];
    }
    return [ok / total, err / total];
  };

  Stats.prototype.toObject = function() {
    this._computeRates();
    return {
      hits: this.hitCount,
      misses: this.missCount,
      evictions: this.evictionCount,
      rates: this._computeRates()
    };
  };

  Stats.prototype.toString = function() {
    var k, v, x;
    x = this.toObject();
    return ((function() {
      var results;
      results = [];
      for (k in x) {
        if (!hasProp.call(x, k)) continue;
        v = x[k];
        results.push(k + ": " + v);
      }
      return results;
    })()).join(', ');
  };

  return Stats;

})();
