var errors;

errors = require('common-errors');

module.exports = function(obj, opts) {
  var convert, field, getter, name, setter, store;
  if (arguments.length !== 2) {
    throw new errors.ArgumentNullError('obj');
  }
  if (opts == null) {
    opts = {};
  }
  name = opts.name || (function() {
    throw new MissingOptionError({
      name: 'name'
    });
  })();
  if (obj[name] != null) {
    throw new ItemExistsError({
      name: name
    });
  }
  store = opts.store || obj;
  field = opts.field || (store === obj ? "_" + name : name);
  convert = opts.convert || function(v) {
    return v;
  };
  getter = opts.getter || function() {
    return store[field];
  };
  setter = opts.setter || function(v) {
    return store[field] = v;
  };
  obj[name] = function(value) {
    var v;
    if (opts.readonly && arguments.length > 0) {
      throw new errors.NotPermitted("'" + name + "' is readonly.");
    }
    if (arguments.length === 0) {
      return v = getter();
    }
    value = convert(value);
    if (v !== value) {
      setter(value);
      if (typeof obj.emit === 'function') {
        obj.emit("changed:" + name, value, v);
      }
    }
    return obj;
  };
  if (opts.readonly) {
    if (opts.initial == null) {
      throw errors.ArgumentNullError('initial');
    }
    setter(convert(opts.initial));
  } else {
    if (opts.initial != null) {
      obj[name](opts.initial);
    }
  }
  return obj;
};
